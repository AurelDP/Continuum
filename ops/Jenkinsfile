pipeline {
  environment {
    registryCredential = 'dockerhub_id'
    dockerImage = ''
    dockerImageName = ''
    dockerImageTag = ''
  }
  agent { label 'slave' }
  stages {
    stage('Cloning Git') {
      steps {
        echo("Cloning Git")
        git([url: 'git@github.com:AurelDP/Continuum.git', branch: 'main', credentialsId: 'github_id'])
      }
    }
    stage('Building image') {
      steps {
        script {
          dir('dev') {
            echo("Building docker image")
            dockerImageName = sh(script: 'mvn help:evaluate -Dexpression=docker.image.name -q -DforceStdout', returnStdout: true).trim()
            dockerImageTag = sh(script: 'mvn help:evaluate -Dexpression=docker.image.tag -q -DforceStdout', returnStdout: true).trim()
            def jenkinsBuildId = env.BUILD_NUMBER

            sh "docker build --build-arg DOCKER_IMAGE_NAME=${dockerImageName} --build-arg JENKINS_BUILD_ID=${jenkinsBuildId} -t aureldp/${dockerImageName}:${dockerImageTag} ."

            dockerImage = docker.image("aureldp/${dockerImageName}:${dockerImageTag}")
          }
        }
      }
    }
    stage('Deploy Image') {
      steps {
        script {
          echo("Deploying docker image")
          docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage('Remove Unused docker image') {
      steps {
        echo("Removing docker image")
        sh "docker rmi ${dockerImage.id}"
      }
    }
    stage('Deploy to Development') {
      steps {
        script {
          echo("Checking Minikube status")
          def status = sh(script: 'minikube status', returnStatus: true)
          if (status != 0) {
            error("Minikube is not running. Please start Minikube before running this pipeline.")
          }

          echo("Deploying to Development environment")
          def namespace = sh(script: 'kubectl get ns development', returnStatus: true)
          if (namespace != 0) {
            sh 'kubectl create ns development'
          }
          sh """
            sed -i "s,program_name,${dockerImageName}," ops/continuum-dev.yaml
            sed -i "s,image_name,aureldp/${dockerImageName}:${dockerImageTag}," ops/continuum-dev.yaml
            kubectl apply -f ops/continuum-dev.yaml
          """

          echo("Exposing the service to the outside world with port-forward")
          sh """
            kubectl port-forward svc/${dockerImageName}-service 8080:8081 -n development &
            sleep 10
          """
        }
      }
    }
    stage('Test Deployment') {
      steps {
        script {
          echo("Testing deployment")
          def status = sh(script: 'curl -w "%{http_code}" localhost:8081', returnStatus: true)
          if (status != 0) {
            error("Curl command failed with status code: ${status}")
          }
        }
      }
    }
    stage('Deploy to Production') {
      steps {
        script {
          echo("Deploying to Production environment")
          def namespace = sh(script: 'kubectl get ns production', returnStatus: true)
          if (namespace != 0) {
            sh 'kubectl create ns production'
          }
          sh """
            sed -i "s,program_name,${dockerImageName}," ops/continuum-prod.yaml
            sed -i "s,image_name,aureldp/${dockerImageName}:${dockerImageTag}," ops/continuum-prod.yaml
            kubectl apply -f ops/continuum-prod.yaml
          """

          echo("Exposing the service to the outside world with port-forward")
          sh """
            kubectl port-forward svc/${dockerImageName}-service 8080:8082 -n production &
            sleep 10
          """
        }
      }
    }
  }
}